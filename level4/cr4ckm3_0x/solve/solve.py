# data = [
# 	0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00,
# 	0x02, 0x00, 0x03, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x00, 0x02, 0x00,
# 	0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00,
# 	0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00,
# 	0x01, 0x60, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0,
# 	0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0,
# 	0x08, 0xd8, 0x08, 0xd8, 0x08, 0xd8, 0x08, 0xd8, 0x08, 0xd8, 0x08, 0xd8, 0x08, 0xd8, 0x08, 0xd8,
# 	0x08, 0xd8, 0x08, 0xd8, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0,
# 	0x04, 0xc0, 0x08, 0xd5, 0x08, 0xd5, 0x08, 0xd5, 0x08, 0xd5, 0x08, 0xd5, 0x08, 0xd5, 0x08, 0xc5,
# 	0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5,
# 	0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5,
# 	0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0,
# 	0x04, 0xc0, 0x08, 0xd6, 0x08, 0xd6, 0x08, 0xd6, 0x08, 0xd6, 0x08, 0xd6, 0x08, 0xd6, 0x08, 0xc6,
# 	0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6,
# 	0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6,
# 	0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x02, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
# 	0x43, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x3c, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
# 	0x52, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00,
# 	0x2f, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00,
# 	0x32, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
# 	0x20, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
# 	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00,
# 	0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00,
# 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00
# ]

# for i in range(0x20, 128):
#     if data[2 * i + 1] & 8:
#         print(i, chr(i))
# prints all the digits, i.e., 0-9

# 2
# pqrs
# jklmn
# 0-9
# -
# -

# 2pk0--424

import subprocess

def check_solution(s):
    prog = subprocess.Popen('./cr4ckm3_0x', shell = True, \
                stdin = subprocess.PIPE, stdout = subprocess.PIPE)
    ret = prog.communicate(s)
    return ret

s_template = '2%s%s%s--424'

for c1 in 'pqrs':
    for c2 in 'jklmn':
        for c3 in '0123456789':
            s = s_template % (c1, c2, c3)
            # print(s)
            data, _ = check_solution(s)
            if not 'Oh no' in data:
                print(s)
                print(data)

# 2sl0--424
# [+] Welcome to cr4ckm3_0x
# [+] Try to get the correct password
# [+] I hope that will be funny
# [+] Developed by Binary Newbie

# Enter the password: [+] Yes, keep going :)
# [+] Yes, keep going :)
# [+] Yes, keep going :)
# [+] Yes, keep going :)
# [+] Yes, keep going :)
# [+] Yes, keep going :)
# Here is your hash: d867f9f78c62e060f741670ae2cdb4873f1645a33f13347f0bb240bc4d36f9a2
# G00D J0B -> H3r3 1s y0ur FL4G{2sl0--424} :)