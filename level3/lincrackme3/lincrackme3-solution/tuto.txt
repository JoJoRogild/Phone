#
#Solution to:
#adrianbn's lincrackme3
#
#32 bit version analyzed.
#
#The crackme ask for a valid serial with the format: XXXX-YYYY-WWWW-ZZZZ, where X,Y,W and Z are numbers from 0 to 9.
#It uses two antidebugging techniques and some antidisassembing techniques as well.
#
#Tools used: IDA, Evan's debugger and python (for the keygen).
#
#Before executing the main function it executes the init function that calls init_proc.
#We can see here the first check for debugger. It uses the close 3 technique as we saw in lincrackme2.
#The crackme calls check_for_close3 at 0804842B.
#
#.init:08048404                 public _init_proc
#.init:08048404 _init_proc    proc near
#.init:08048404                 push    ebp
#.init:08048405                 mov     ebp, esp
#.init:08048407                 push    ebx
#.init:08048408                 sub     esp, 4
#.init:0804840B                 call    $+5
#.init:08048410                 pop     ebx
#.init:08048411                 add     ebx, 1BE4h
#.init:08048417                 mov     edx, [ebx-4]
#.init:0804841D                 test    edx, edx
#.init:0804841F                 jz      short loc_8048426
#.init:08048421                 call    ___gmon_start__
#.init:08048426
#.init:08048426 loc_8048426:
#.init:08048426                 call    sub_8048590
#.init:0804842B                 call    check_for_close3
#.init:08048430                 pop     eax
#.init:08048431                 pop     ebx
#.init:08048432                 leave
#.init:08048433                 retn
#.init:08048433 _init_proc      endp
#
#The check_for_close3 subroutine calls check_close3:
#(just put a breakpoint at 0804860E and force EIP to 0804862A to bypass the check)
#
#.text:080485FC check_close3    proc near
#.text:080485FC
#.text:080485FC var_18          = dword ptr -18h
#.text:080485FC
#.text:080485FC                 push    ebp
#.text:080485FD                 mov     ebp, esp
#.text:080485FF                 sub     esp, 18h
#.text:08048602                 mov     [esp+18h+var_18], 3
#.text:08048609                 call    _close
#.text:0804860E                 test    eax, eax
#.text:08048610                 jnz     short locret_804862A
#.text:08048612                 mov     [esp+18h+var_18], offset aDebuggerDetect ; "Debugger detected. Bye!"
#.text:08048619                 call    _puts
#.text:0804861E                 mov     [esp+18h+var_18], 0FFFFFFFFh
#.text:08048625                 call    _exit
#.text:0804862A ; ---------------------------------------------------------------------------
#.text:0804862A
#.text:0804862A locret_804862A:
#.text:0804862A                 leave
#.text:0804862B                 retn
#.text:0804862B check_close3    endp
#
#In the main function we can see that crackme push into de local variables the address of the check_ptrace function.
#(See below)
#Then shows the welcome message and the instructions and ask us for a valid serial.

#.text:080487A2                 mov     dword ptr [esp+28h], offset check_ptrace
#.text:080487AA                 mov     dword ptr [esp+0], offset asc_8048AB8 ; " **************************************"...
#.text:080487B1                 call    _puts
#.text:080487B6                 mov     eax, offset aEnterTheKeyYou ; "Enter the key, you fool: "
#.text:080487BB                 mov     [esp+0], eax
#.text:080487BE                 call    _printf
#
#Later, it makes a compare with our serial and the string: "It's not that easy, dude"
#But this is a distract maneuver ;-)
#It never uses the result of that comparison.
#
#.text:080487FD loc_80487FD:
#.text:080487FD                 mov     dword ptr [esp+8], 10h
#.text:08048805                 mov     dword ptr [esp+4], offset aItSNotThatEasy ; "It's not that easy, dude"
#.text:0804880D                 lea     eax, [esp+0E4h+var_2B+3]
#.text:08048814                 mov     [esp+0], eax
#.text:08048817                 call    _strncmp
#
#Here we can see an antidisassembling technique:
#First it makes a call from 08048841 to 08048847, jumping above the 0xe9 byte which is the opcode of a jump instruction.
#IDA is smart enough to disassemble the code.
#Then it pops the return address, adds 0x9d to it and pushs it again, so the real returning address is 0x80488e3.
#
#.text:08048841                 call    fool_debugger
#.text:08048841 ; ---------------------------------------------------------------------------
#.text:08048846                 db 0E9h
#.text:08048847 ; ---------------------------------------------------------------------------
#.text:08048847
#.text:08048847 fool_debugger:
#.text:08048847                 pop     eax             ; modify return address
#.text:08048848                 add     eax, 9Dh
#.text:0804884D                 push    eax
#.text:0804884E                 retn                    ; return to 0x80488e3
#
#On return, it loads the check_ptrace fucntion address into EBP register and calls it.
#
#.text:080488E3 check_for_ptrace:
#.text:080488E3                 mov     ebx, [esp+28h]
#.text:080488E7                 call    ebx             ; Call check_ptrace
#.text:080488E9                 jmp     continue
#
#The check_ptrace function is the other antidebugging technique.
#It calls the ptrace function (you can see the man page of ptrace).
#The ptrace function returns an error if the process is beeing already traced and this code checks this at 080485E0.
#
#.text:080485B4 check_ptrace    proc near
#.text:080485B4
#.text:080485B4 var_18          = dword ptr -18h
#.text:080485B4 var_14          = dword ptr -14h
#.text:080485B4 var_10          = dword ptr -10h
#.text:080485B4 var_C           = dword ptr -0Ch
#.text:080485B4
#.text:080485B4                 push    ebp
#.text:080485B5                 mov     ebp, esp
#.text:080485B7                 sub     esp, 18h
#.text:080485BA                 mov     [esp+18h+var_C], 0
#.text:080485C2                 mov     [esp+18h+var_10], 1
#.text:080485CA                 mov     [esp+18h+var_14], 0
#.text:080485D2                 mov     [esp+18h+var_18], 0
#.text:080485D9                 call    _ptrace
#.text:080485DE                 test    eax, eax
#.text:080485E0                 jns     not_traced
#.text:080485E2                 mov     [esp+18h+var_18], offset aDebuggerDetect ; "Debugger detected. Bye!"
#.text:080485E9                 call    _puts
#.text:080485EE                 mov     [esp+18h+var_18], 0FFFFFFFFh
#.text:080485F5                 call    _exit
#.text:080485FA ; ---------------------------------------------------------------------------
#.text:080485FA
#.text:080485FA not_traced:
#.text:080485FA                 leave
#.text:080485FB                 retn
#.text:080485FB check_ptrace    endp
#
#You can bypass the ptrace check putting a breakpoint at 080485DE and force the EIP to 080485FA.
#
#The crackme continues here:
#It calculates the sum of all digits from each part of the serial:
#our serial: XXXX-YYYY-WWWW-ZZZZ
#A_Part = X+X+X+X
#B_Part = Y+Y+Y+Y
#C_part = W+W+W+W
#D_part = Z+Z+Z+Z
#
#.text:08048850 continue:
#.text:08048850                 mov     eax, eax
#.text:08048852                 mov     dword ptr [esp+24h], 0 ; serial_index
#.text:0804885A                 jmp     short begin_calc
#.text:0804885C ; ---------------------------------------------------------------------------
#.text:0804885C
#.text:0804885C Calc_sum:
#.text:0804885C                 mov     eax, [esp+24h]
#.text:08048860                 movzx   eax, byte ptr [esp+eax+0BCh] ; serial
#.text:08048868                 cbw
#.text:0804886A                 add     ax, [esp+36h]   ; A_part
#.text:0804886F                 sub     eax, 30h
#.text:08048872                 mov     [esp+36h], ax
#.text:08048877                 mov     eax, [esp+24h]
#.text:0804887B                 add     eax, 4
#.text:0804887E                 movzx   eax, byte ptr [esp+eax+0BCh]
#.text:08048886                 cbw
#.text:08048888                 add     ax, [esp+34h]   ; B_part
#.text:0804888D                 sub     eax, 30h
#.text:08048890                 mov     [esp+34h], ax
#.text:08048895                 mov     eax, [esp+24h]
#.text:08048899                 add     eax, 8
#.text:0804889C                 movzx   eax, byte ptr [esp+eax+0BCh]
#.text:080488A4                 cbw
#.text:080488A6                 add     ax, [esp+32h]   ; C_part
#.text:080488AB                 sub     eax, 30h
#.text:080488AE                 mov     [esp+32h], ax
#.text:080488B3                 mov     eax, [esp+24h]
#.text:080488B7                 add     eax, 0Ch
#.text:080488BA                 movzx   eax, byte ptr [esp+eax+0BCh]
#.text:080488C2                 cbw
#.text:080488C4                 add     ax, [esp+30h]   ; D_part
#.text:080488C9                 sub     eax, 30h
#.text:080488CC                 mov     [esp+30h], ax
#.text:080488D1                 add     dword ptr [esp+24h], 1
#.text:080488D6
#.text:080488D6 begin_calc:
#.text:080488D6                 cmp     dword ptr [esp+24h], 3
#.text:080488DB                 jle     Calc_sum
#.text:080488E1                 jmp     short check_serial
#
#Then it checks the conditions the serial must to achieve.
#Watch the comments in the code:
#
#.text:080488EF check_serial:
#.text:080488EF                 movzx   edx, word ptr [esp+36h] ; A_part
#.text:080488F4                 movzx   eax, word ptr [esp+34h] ; B_part
#.text:080488F9                 lea     ecx, [edx+eax]  ; ab = A_part + B_part
#.text:080488FC                 movzx   edx, word ptr [esp+32h] ; C_part
#.text:08048901                 movzx   eax, word ptr [esp+30h] ; D_part
#.text:08048906                 lea     eax, [edx+eax]  ; cd = C_part + D_part
#.text:08048909                 add     eax, eax        ; cd = cd * 2
#.text:0804890B                 cmp     ecx, eax        ; ab = cd ?
#.text:0804890D                 jnz     short bad_boy
#.text:0804890F                 movzx   eax, word ptr [esp+34h] ; B_part
#.text:08048914                 cmp     ax, [esp+32h]   ; B_part > C_part?
#.text:08048919                 jbe     short bad_boy
#.text:0804891B                 movzx   edx, word ptr [esp+36h] ; A_part
#.text:08048920                 movzx   eax, word ptr [esp+30h] ; D_part
#.text:08048925                 lea     eax, [edx+eax]  ; ad = A_part + D_part
#.text:08048928                 and     eax, 1
#.text:0804892B                 test    al, al          ; is ad an even number?
#.text:0804892D                 jnz     short bad_boy
#.text:0804892F                 cmp     word ptr [esp+36h], 5 ; A_part > 5?
#.text:08048935                 jbe     short bad_boy
#.text:08048937                 cmp     word ptr [esp+36h], 18h ; A_part < 24?
#.text:0804893D                 ja      short bad_boy
#.text:0804893F                 movzx   eax, word ptr [esp+30h] ; D_part
#.text:08048944                 and     eax, 1
#.text:08048947                 test    eax, eax        ; is D_part an odd number?
#.text:08048949                 jnz     short good_boy
#.text:0804894B
#.text:0804894B bad_boy:
#.text:0804894B                 mov     dword ptr [esp+20h], 0
#.text:08048953                 jmp     short bad_boy_2
#.text:08048955 ; ---------------------------------------------------------------------------
#.text:08048955
#.text:08048955 decrypt_bad_msg:
#.text:08048955                 mov     eax, [esp+20h]
#.text:08048959                 movzx   eax, byte ptr [esp+eax+89h]
#.text:08048961                 movsx   eax, al
#.text:08048964                 xor     al, 0E9h
#.text:08048966                 mov     [esp], eax
#.text:08048969                 call    _putchar
#.text:0804896E                 add     dword ptr [esp+20h], 1
#.text:08048973
#.text:08048973 bad_boy_2:
#.text:08048973                 cmp     dword ptr [esp+20h], 31h
#.text:08048978                 jle     short decrypt_bad_msg
#.text:0804897A                 mov     dword ptr [esp], 1
#.text:08048981                 call    _exit
#.text:08048986 ; ---------------------------------------------------------------------------
#.text:08048986
#.text:08048986 good_boy:
#.text:08048986                 mov     dword ptr [esp+1Ch], 0
#.text:0804898E                 jmp     short good_boy_2
#.text:08048990 ; ---------------------------------------------------------------------------
#.text:08048990
#.text:08048990 decrypt_good_msg:
#.text:08048990                 mov     eax, [esp+1Ch]
#.text:08048994                 movzx   eax, byte ptr [esp+eax+38h]
#.text:08048999                 movsx   eax, al
#.text:0804899C                 xor     al, 0F9h
#.text:0804899E                 mov     [esp], eax
#.text:080489A1                 call    _putchar
#.text:080489A6                 add     dword ptr [esp+1Ch], 1
#.text:080489AB
#.text:080489AB good_boy_2:
#.text:080489AB                 cmp     dword ptr [esp+1Ch], 4Fh
#.text:080489B0                 jle     short decrypt_good_msg
#.text:080489B2                 mov     eax, 0
#.text:080489B7                 mov     edx, [esp+0CCh]
#.text:080489BE                 xor     edx, large gs:14h
#.text:080489C5                 jz      short loc_80489CC
#.text:080489C7                 call    ___stack_chk_fail
#.text:080489CC
#.text:080489CC loc_80489CC:
#.text:080489CC                 add     esp, 0D4h
#.text:080489D2                 pop     ebx
#.text:080489D3                 pop     esi
#.text:080489D4                 pop     edi
#.text:080489D5                 mov     esp, ebp
#.text:080489D7                 pop     ebp
#.text:080489D8                 retn
#
#The bad_boy and good_boy messages are encrypted and they are decrypted when needed.
