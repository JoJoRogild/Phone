This crackme is not too complicated to reverse engineer, but coming up with the correct
password requires a little more than just reverse engineering the binary: you also must
solve a tiny cryptography problem. 

The most important portion of the code is a block of 0x110 bytes that has been labeled 
'goodBoy'. When the program starts, this block does not consist of valid machine code,
but instead contains encrypted machine code. The password you enter is used to 'decrypt'
the code. This decryption is very simple: your password (repeated as often as necessary)
is simply xored into goodBoy. After goodBoy has been decrypted, a basic check is carried
out to make sure you decrypted it correctly, and if so, the decrypted code is run. 

Now, if you just try out random passwords, the goodBoy block probably won't decrypt into
valid machine code; if you were to run the code, you would almost surely crash and burn.
For this reason, the check that is carried out before running goodBoy is very important:
it keeps your machine from running invalid code. On the other hand, the check is not 
very strong. All it does is compute a CRC32 on the decrypted goodBoy and makes sure that
it has a specific value. This has two consequences:

    1) It is very unlikely (probability=2^(-32)) that you will accidentally pass the
       CRC check, so you should be safe from accidentally crashing.

    2) It is *very* easy to purposefully come up with code that passes the CRC check.
       All it takes is a little linear algebra, and you could make your goodBoy block
       do all sorts of things. This could have been avoided by using a hash instead of
       a CRC. By using the CRC, destructeur is giving you a juicy opportunity to hack
       this program.



Personally, I wouldn't find a hacky solution all that gratifying, so I will instead try
to find the intended password. To start, I will try to understand how long the password
should be. There is no length check in the code, but we should be able to get a good
guess for the length by studying the (encrypted) goodBoy code. For this reason, let us
save off the encrypted goodBoy block to a file:

    > objdump -x sh4ll9.bin | grep goodBoy
    0000000000489047 g     F .secure        0000000000000110 goodBoy
    > gdb sh4ll9.bin
    (gdb) dump binary memory good_boy 0x489047 0x489157

At this point all 0x110 bytes of goodBoy should be saved to a file named good_boy, which
can be examined with a hexdump:

    > hexdump -C good_boy
    00000000  2c 27 fc 96 20 e2 80 3c  3c dd 2f 24 2f 24 55 24  |,'.. ..<<./$/$U$|
    00000010  20 3b 24 e5 31 d5 29 ca  23 2b 23 2a 23 4d 4c 28  | ;$.1.).#+#*#ML(|
    00000020  3c ec 24 ca 31 d7 39 20  22 37 38 20 54 2c 29 fb  |<.$.1.9 "78 T,).|
    00000030  3c af 3d cb 20 2b 3e 4c  3c 2e 35 22 31 e6 30 bb  |<.=. +>L<.5"1.0.|
    00000040  20 d9 39 3c 2e 24 38 3a  38 39 3d fa 2d b1 0a ab  | .9<.$8:89=.-...|
    00000050  31 bd 38 53 bf 2a af 73  20 ec 29 dc 3c ec a6 9a  |1.8S.*.s .).<...|
    00000060  6c 80 8d 8c e1 24 98 24  f9 20 d1 3a f0 a8 9d 75  |l....$.$. .:...u|
    00000070  87 99 93 24 f7 a5 60 3a  f0 a8 9d 59 c0 99 93 24  |...$..`:...Y...$|
    00000080  fd 20 89 b5 3c 8b 72 73  68 61 ab 29 88 65 61 72  |. ..<.rsha.).ear|
    00000090  79 84 13 f8 2d 9d 63 da  30 60 d1 4e 39 11 37 f8  |y...-.c.0`.N9.7.|
    000000a0  2d 9d 63 da 30 60 d1 4e  23 10 43 f8 2d 9d 63 da  |-.c.0`.N#.C.-.c.|
    000000b0  30 60 d1 fb bb e4 30 97  41 a3 e5 bc fc 20 9a f2  |0`....0.A.... ..|
    000000c0  04 94 35 0c 62 6e da 29  8f e6 a1 68 f1 2a 8e f8  |..5.bn.)...h.*..|
    000000d0  3d 9d 24 e7 31 8d 29 73  bb 60 c3 36 93 e9 6e 87  |=.$.1.)s.`.6..n.|
    000000e0  60 ee 34 8e 31 e4 30 9b  20 60 ae e7 31 99 6e c4  |`.4.1.0. `..1.n.|
    000000f0  3d 6a c5 fb 6a e2 29 90  75 ee 24 8e 42 2a 81 01  |=j..j.).u.$.B*..|
    00000100  fa 29 e7 29 9c 2d e8 b5  91 13 87 84 97 f1 a5 af  |.).).-..........|
    00000110

How can we determine the length of the key used to decrypt this? The traditional method
is to guess the length L and then check it my computing the xor of good_boy with good_boy
shifted by L bytes. The L that gives an xor with the smallest Hamming weight (that is,
the smallest number of set bits) is most likely the right length. The following script
does does exactly that:


################## FILE: test_lengths.py
def get_hamming_weight(x):
    return sum(c != '0' for c in '{:b}'.format(x))

with open('good_boy', 'rb') as f:
    good_boy = [int(b) for b in f.read()]

avg_weights = dict()

## Guess lengths L = 1,2,...,20
for L in range(1,21):
    avg_weight = 0
    ## break good_boy into N pieces of length L
    N = int( len(good_boy)/L )

    for i in range(N-1):
        ## xor together the bytes in subsequent pieces, tabulate their Hamming weights
        for j in range(L):
            avg_weight += get_hamming_weight(good_boy[L*i+j] ^ good_boy[L*(i+1)+j])

    ## normalize to get the average weight per byte in the xor, store it in a dict
    avg_weight /= L*(N-1)
    avg_weights[L] = avg_weight

## print the results
for x in sorted([(k, avg_weights[k]) for k in avg_weights], key=lambda x:x[1]):
    print('Length {:2d}: average Hamming weight per byte: {:f}'.format(x[0], x[1]))
################## end test_lengths.py


Running it gives the following:

    > python3 test_lengths.py
    Length 12: average Hamming weight per byte: 3.313492
    Length 16: average Hamming weight per byte: 3.609375
    Length  7: average Hamming weight per byte: 3.648649
    Length  4: average Hamming weight per byte: 3.652985
    Length  2: average Hamming weight per byte: 3.685185
    Length 14: average Hamming weight per byte: 3.714286
    Length  8: average Hamming weight per byte: 3.723485
    Length 18: average Hamming weight per byte: 3.753968
    Length 17: average Hamming weight per byte: 3.772549
    Length 20: average Hamming weight per byte: 3.775000
    Length 10: average Hamming weight per byte: 3.792308
    Length  3: average Hamming weight per byte: 3.823970
    Length  5: average Hamming weight per byte: 3.837736
    Length 15: average Hamming weight per byte: 3.839216
    Length 19: average Hamming weight per byte: 3.858300
    Length 11: average Hamming weight per byte: 3.885375
    Length  9: average Hamming weight per byte: 3.908046
    Length  6: average Hamming weight per byte: 3.992424
    Length 13: average Hamming weight per byte: 4.016194
    Length  1: average Hamming weight per byte: 4.018450



Based on this test, we should start by trying passwords of length 12. But how do we 
actually get those 12 bytes? Since goodBoy is to be called (as a function), we have
a very good idea how it should start:

    55          push rbp
    48 89 e5    mov  rbp, rsp
 
Since the first four bytes of the (encrypted) goodBoy are 2c 27 fc 96, the first four
characters of our password need to be 'yous' in order for the (decrypted) goodBoy to
start with these instructions. 

It is also very likely that the next instruction will have the form

                sub  rsp, ???

Depending on the size of ???, the opcodes may vary, but should either be:

    48 83 ec xx                 sub  rsp, xx        (xx = one byte)
    48 81 ec yy yy 00 00        sub  rsp, yyyy      (yyyy = two bytes)

We can try them both out:


                     One byte            Two byte
                     --------            --------
           opcode:   48 83 ec xx         48 81 ec yy yy 00 00
encrypted goodBoy:   20 e2 80 3c         20 e2 80 3c 3c dd 2f
         password:   h  a  l  ??         h  c  l  ?? ?? dd /


Obviously the one-byte case seems more promising, since the password characters make
English sense and are all printable. We will therefore assume the next instruction is
of the form "sub rsp, xx" with a single byte xx. This gives us the first seven of our
twelve password characters:

    password = 'youshal?????'

To try to fill in the missing characters, let us go back to the hexdump of the encrypted
goodBoy block, specifically to the line:

    00000080  fd 20 89 b5 3c 8b 72 73  68 61 ab 29 88 65 61 72  |. ..<.rsha.).ear|

Recalling that machine code often has successive 00 bytes, it makes sense that we may
see parts of our password leaking out in the encrypted code. In fact, if we line up our 
current password guess in this line hex we get:

        dump:       |. ..<.rsha.).ear|
    password:       |????youshal?????|

Notice the overlap of the 'sha' portions. This gives us some confirmation that we're on
the right track, and makes us more confident in our guess that the password length is 12.
But it also gives us a guess for the last three characters of the password: ear. If there
are 00 bytes in the decrypted goodBoy at those three locations, then ear is the end of
our password. This gives us the guess:

    password = 'youshal??ear'

Assuming that the password is an english phrase (it certainly appears so), the first ?
is likely an 'l'. Indeed, looking at words that start with 'shal', only a few have next
letter not 'l':

    > grep '^shal' /user/share/dict/words    
    shale
    shale's
    shall
    shallot
    shallot's
    shallots
    shallow
    shallow's
    shallower
    shallowest
    shallowness
    shallowness's
    shallows
    shalt

Moreover, there are only a few four-letter words that end in 'ear':

    > grep '^.ear$' /usr/share/dict/words
    Lear
    bear
    dear
    fear
    gear
    hear
    near
    pear
    rear
    sear
    tear
    wear
    year

Based on this, I think the most natural sounding password would be 'youshallhear'. Let's
try it out! The following script decrypts goodBoy with the password 'youshallhear' and
stores the result in a file called good_boy_decrypted.


################## FILE: decrypt_good_boy.py
with open('good_boy', 'rb') as f:
    good_boy = [int(b) for b in f.read()]

password_guess = 'youshallhear'
N = len(password_guess)
for i in range(len(good_boy)):
    good_boy[i] ^= ord(password_guess[i % N])

with open('good_boy_decrypted', 'wb') as f:
    f.write(bytes(good_boy))
################## end decrypt_good_boy.py


To see if that worked, we can look disassemble the result and see if it makes sense. 
It doesn't take long to see that there is something wrong still:

    > objdump -D -Mintel,x86-64 -b binary -m i386 good_boy_decrypted
    
    00000000 <.data>:
       0:   55                      push   rbp
       1:   48 89 e5                mov    rbp,rsp
       4:   48 83 ec 50             sub    rsp,0x50
       8:   54                      push   rsp                        # obviously wrong
       9:   b8 4e 56 56 4b          mov    eax,0x4b56564e
       e:   20 57 48                and    BYTE PTR [rdi+0x48],dl
      11:   5a                      pop    rdx
      12:   48 89 59 b0             mov    QWORD PTR [rcx-0x50],rbx
      16:   48 b8 5a 44 56 59 4b    movabs rax,0x44202c4b5956445a
      1d:   2c 20 44 
      20:   54                      push   rsp
      21:   89 45 b8                mov    DWORD PTR [rbp-0x48],eax
      24:   48 b8 4c 53 4a 56 54    movabs rax,0x493c4c54564a534c
      2b:   4c 3c 49 
      2e:   48 89 45 c0             mov    QWORD PTR [rbp-0x40],rax
      32:   48 b8 48 4a 52 20 54    movabs rax,0x50544b5420524a48
      39:   4b 54 50 
      3c:   48 89 45 c8             mov    QWORD PTR [rbp-0x38],rax
      40:   48 b8 55 50 46 41 59    movabs rax,0x5641485941465055
      47:   48 41 56 
      4a:   48 89 45 d0             mov    QWORD PTR [rbp-0x30],rax
      4e:   66 c7                   data16 (bad) 
      50:   59                      pop    rcx
      51:   d8 59 21                fcomp  DWORD PTR [rcx+0x21]
      54:   c6 45 da 00             mov    BYTE PTR [rbp-0x26],0x0
      58:   48 8d 45 b0             lea    rax,[rbp-0x50]
      5c:   54                      push   rsp
      5d:   89 c7                   mov    edi,eax
      5f:   e8 15 ef f8 ff          call   0xfff8ef79
      64:   89 45 f4                mov    DWORD PTR [rbp-0xc],eax
      67:   48 91                   xchg   rcx,rax
      69:   45 b0 48                rex.RB mov r8b,0x48
    
                            ...  SNIP ...
    

The first byte that looks wrong occurs at the "push rsp" instruction, corresponding to
the letter 'h' in our password. If the rest of the disassembly is to be believed, the
byte 54 in this position should probably be a 48: this would result in another instruction
of the form 'movabs rax, const', which there are plenty of. Thus we should try replacing
our the 'h' with 

    'h' ^ 0x54 ^ 0x48 = 't',

making our new password guess:

    password = 'youshalltear'

After rerunning the decryption script with this change and disassembling, the code now
looks correct:

    00000000 <.data>:
       0:   55                      push   rbp
       1:   48 89 e5                mov    rbp,rsp
       4:   48 83 ec 50             sub    rsp,0x50
       8:   48 b8 4e 56 56 4b 20    movabs rax,0x5a4857204b56564e
       f:   57 48 5a 
      12:   48 89 45 b0             mov    QWORD PTR [rbp-0x50],rax
      16:   48 b8 5a 44 56 59 4b    movabs rax,0x44202c4b5956445a
      1d:   2c 20 44 
      20:   48 89 45 b8             mov    QWORD PTR [rbp-0x48],rax
      24:   48 b8 4c 53 4a 56 54    movabs rax,0x49204c54564a534c
      2b:   4c 20 49 
      2e:   48 89 45 c0             mov    QWORD PTR [rbp-0x40],rax
      32:   48 b8 48 4a 52 20 48    movabs rax,0x50544b4820524a48
      39:   4b 54 50 
      3c:   48 89 45 c8             mov    QWORD PTR [rbp-0x38],rax
      40:   48 b8 55 50 5a 41 59    movabs rax,0x56414859415a5055
      47:   48 41 56 
      4a:   48 89 45 d0             mov    QWORD PTR [rbp-0x30],rax
      4e:   66 c7 45 d8 59 21       mov    WORD PTR [rbp-0x28],0x2159
      54:   c6 45 da 00             mov    BYTE PTR [rbp-0x26],0x0
      58:   48 8d 45 b0             lea    rax,[rbp-0x50]
      5c:   48 89 c7                mov    rdi,rax
      5f:   e8 15 ef f8 ff          call   0xfff8ef79                       # strlen
      64:   89 45 f4                mov    DWORD PTR [rbp-0xc],eax
      67:   48 8d 45 b0             lea    rax,[rbp-0x50]
      6b:   48 89 c7                mov    rdi,rax
      6e:   e8 06 ef f8 ff          call   0xfff8ef79                       # strlen
      73:   48 83 c0 01             add    rax,0x1
      77:   48 89 c7                mov    rdi,rax
      7a:   e8 2a a8 f8 ff          call   0xfff8a8a9                       # malloc
      7f:   48 89 45 e8             mov    QWORD PTR [rbp-0x18],rax
      83:   c7 45 e4 07 00 00 00    mov    DWORD PTR [rbp-0x1c],0x7
      8a:   c7 45 fc 00 00 00 00    mov    DWORD PTR [rbp-0x4],0x0
      91:   eb 66                   jmp    0xf9
      93:   8b 45 fc                mov    eax,DWORD PTR [rbp-0x4]
      96:   0f b6 44 05 b0          movzx  eax,BYTE PTR [rbp+rax*1-0x50]
      9b:   3c 40                   cmp    al,0x40
      9d:   7e 42                   jle    0xe1
      9f:   8b 45 fc                mov    eax,DWORD PTR [rbp-0x4]
      a2:   0f b6 44 05 b0          movzx  eax,BYTE PTR [rbp+rax*1-0x50]
      a7:   3c 5a                   cmp    al,0x5a
      a9:   7f 36                   jg     0xe1
      ab:   8b 45 fc                mov    eax,DWORD PTR [rbp-0x4]
      ae:   0f b6 44 05 b0          movzx  eax,BYTE PTR [rbp+rax*1-0x50]
      b3:   89 c2                   mov    edx,eax
      b5:   8b 45 e4                mov    eax,DWORD PTR [rbp-0x1c]
      b8:   29 c2                   sub    edx,eax
      ba:   89 d0                   mov    eax,edx
      bc:   88 45 fb                mov    BYTE PTR [rbp-0x5],al
      bf:   80 7d fb 40             cmp    BYTE PTR [rbp-0x5],0x40
      c3:   7f 0a                   jg     0xcf
      c5:   0f b6 45 fb             movzx  eax,BYTE PTR [rbp-0x5]
      c9:   83 c0 1a                add    eax,0x1a
      cc:   88 45 fb                mov    BYTE PTR [rbp-0x5],al
      cf:   8b 55 fc                mov    edx,DWORD PTR [rbp-0x4]
      d2:   48 8b 45 e8             mov    rax,QWORD PTR [rbp-0x18]
      d6:   48 01 c2                add    rdx,rax
      d9:   0f b6 45 fb             movzx  eax,BYTE PTR [rbp-0x5]
      dd:   88 02                   mov    BYTE PTR [rdx],al
      df:   eb 14                   jmp    0xf5
      e1:   8b 55 fc                mov    edx,DWORD PTR [rbp-0x4]
      e4:   48 8b 45 e8             mov    rax,QWORD PTR [rbp-0x18]
      e8:   48 01 c2                add    rdx,rax
      eb:   8b 45 fc                mov    eax,DWORD PTR [rbp-0x4]
      ee:   0f b6 44 05 b0          movzx  eax,BYTE PTR [rbp+rax*1-0x50]
      f3:   88 02                   mov    BYTE PTR [rdx],al
      f5:   83 45 fc 01             add    DWORD PTR [rbp-0x4],0x1
      f9:   8b 45 fc                mov    eax,DWORD PTR [rbp-0x4]
      fc:   3b 45 f4                cmp    eax,DWORD PTR [rbp-0xc]
      ff:   72 92                   jb     0x93
     101:   48 8b 45 e8             mov    rax,QWORD PTR [rbp-0x18]
     105:   48 89 c7                mov    rdi,rax
     108:   e8 7c f2 f7 ff          call   0xfff7f389                       # puts
     10d:   90                      nop
     10e:   c9                      leave  
     10f:   c3                      ret    


Reversing this function is very easy. It starts by loading a string onto the stack's
memory, based at rbp-0x50:

    rbp-0x50:  'NVVK WHZZDVYK, DLSJVTL IHJR HKTPUPZAYHAVY!'

It then does a Caesar rotation (subtracting 7 from each letter) on each letter and
prints the result to the screen: 'GOOD PASSWORD, WELCOME BACK ADMINISTRATOR!'



==========================
  SOLUTION: youshalltear
==========================

