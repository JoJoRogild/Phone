Used tools/programs: GDB, objdump.


A quick look at the beggining of the disassembled binary tells us, that to solve this crackme we need to give an integer number:

6b4:	48 8d 3d 69 02 00 00    lea    0x269(%rip),%rdi     # "%d"
(...)
6d8:	e8 a3 ff ff ff       	callq  680 <__isoc99_scanf@plt>

After reading the user input, the program goes into a loop, that in assembly looks like this:

=============================================================================================================================
6ef:	eb 13                	jmp    704 <__cxa_finalize@plt+0x64>    # loop entry

 6f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
 6f8:	c6 00 05             	movb   $0x5,(%rax)
 6fb:	48 83 c0 05          	add    $0x5,%rax
 6ff:	48 39 c6             	cmp    %rax,%rsi
 702:	74 17                	je     71b <__cxa_finalize@plt+0x7b> # loop exit

 704:	89 d1                	mov    %edx,%ecx
 706:	d1 fa                	sar    %edx
 708:	83 e1 01             	and    $0x1,%ecx
 70b:	85 c9                	test   %ecx,%ecx
 70d:	75 e9                	jne    6f8 <__cxa_finalize@plt+0x58>
 
 70f:	c6 00 2d             	movb   $0x2d,(%rax)
 712:	48 83 c0 05          	add    $0x5,%rax
 716:	48 39 c6             	cmp    %rax,%rsi
 719:	75 e9                	jne    704 <__cxa_finalize@plt+0x64>
=============================================================================================================================
 
 %rax - stores pointer, that is incremented by 5 in each iteration;
 %rsi - stores a pointer; if %rax>=%rsi, then we get out of the loop;
 %rdx - stores user input; 

 After short analysis of the code above we can rewrite it in C, so that we see a bit better what's happening there:

=============================================================================================================================
int user_input;
char* start;
char* end;
while(start < end){         // btw end-start = 160, so we got exactly 32 iterations
    int tmp = user_input;
    user_input = user_input>>1;
    if(tmp & 1 == 0){
        *start = 0x2d;  // 0x2d = 45
    }
    else{
        *start = 0x5;
    }
    start += 5;
}
=============================================================================================================================

As we can see, in each iteration we put 45 or 5 into some place in memory depending on the subsequent bits of the user_input.
We put them every 5 bytes, not 4,8 or 16 and that might seem quite surprising actually. However, after going out of the loop
and performing several other instructions, we call this mysterious place in memory:

742:	e8 d9 08 20 00       	callq  201020 <__cxa_finalize@plt+0x200980>

Using GDB we see what's going on there:

0x0000555555755020  ? mov    $0x3df2f794,%eax
0x0000555555755025  ? sub    $0x52ae22f2,%eax
0x000055555575502a  ? add    $0xbf409bcc,%eax
0x000055555575502f  ? add    $0x46417dc1,%eax
0x0000555555755034  ? add    $0x25f7d9a1,%eax
0x0000555555755039  ? sub    $0xef83a7ce,%eax
(...)
0x00005555557550c0  ? sub    $0x4043cd91,%eax
0x00005555557550c5  ? cmp    $0x7a612770,%eax
0x00005555557550ca  ? sete   %al
0x00005555557550cd  ? nop
0x00005555557550ce  ? nop
0x00005555557550cf  ? retq

Knowgledge, how these instructions are encoded, is the key to solve this crackme:
* sub (ImmVal),%eax == 2d xx xx xx xx 
* add (ImmVal),%eax == 05 xx xx xx xx

As we know this, we can easily see, that the user_input should be a number, which binary representation (1 implies add, 0 implies sub) 
will manipulate these add/sub instrucions in such a way, that at the end we will obtain desired value in %rax.
Unfortunately those numbers are completely random so I decided to write a simple program in C, that would help me to find actually possible keys.
But first we need to extract these numbers from memory in a convenient way - writing a simple GDB script is helpful:

define display5
set $start = $arg0+1        // arg0 and arg1 are use given arguments (display5 "arg0" "arg1")
set $finish = $arg1
while $start < $finish
	print /x *(int *) $start
	set $start = $start + 5
end
end

As we have all these numbers extracted, we can write the program:

=============================================================================================================================
#include<stdio.h>
#include<stdbool.h>
#include<stdint.h>

int start = 0x3df2f794;
int values[32] = { 0x52ae22f2, 0xbf409bcc, 0x46417dc1, 0x25f7d9a1, 0xef83a7ce, 0x2dd63e8e, 0x584a1ec5, 0x8e58e1df, 0xf2705f70, 0x2e94ef1e,
    0x3ca9e080, 0xa617b5df, 0x29ae9c3d, 0x7461ed52, 0x7125faac, 0x65dfffd6, 0x97f1f41c, 0x6f4e0648, 0xd803e5d0, 0xf358f0eb, 0xbc3b30c7,
    0x585685f8, 0x2a9cc47c, 0x7f03d175, 0xc1d942ae, 0x174c7d4f, 0xb7d004f0, 0xbec8b077, 0x8ce8eaa2, 0x2510e330, 0x4aed0eee, 0x4043cd91
};

int result = 0x7a612770;

typedef unsigned uint;

static uint32_t bitrev_iter(uint32_t x) {
  uint32_t b, r = 0;
  for (int i = 0; i < 32; i++) {
    b = (x >> i) & 1;
    r |= b << (31 - i);
  }
  return r;
}

void search(uint level, int sum, uint32_t marker){
    if(level == 31){
        if(__builtin_expect((sum + values[level] == result),0)) printf("%d\n",bitrev_iter((marker<<1)+1));
        if(__builtin_expect((sum - values[level] == result),0)) printf("%d\n",bitrev_iter(marker<<1)); 
        else return;
    }
    else{
        search(level + 1, sum + values[level],(marker<<1)+1);
        search(level + 1, sum - values[level],marker<<1);
    }
}
int main (){
    search(0,start,0);
    return 0;
}
=============================================================================================================================

After some seconds we have the results:

374274518
-1666634662
-1923834644
1804139300

Hopefully there is nothing I've overlooked :)
